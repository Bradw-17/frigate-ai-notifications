---
blueprint:
  name: Frigate AI Camera Notifications (v2.0)
  description: >
    ðŸš¨ AI-enhanced Frigate notifications with intelligent camera analysis.

    ðŸ§  Supports both AI Task (HA 2025.8+) and LLM Vision integrations.

    ðŸ“± Sends rich notifications with media via the HA Companion app.

    ðŸ“Œ Requirements:
      - Frigate + MQTT enabled
      - EITHER AI Task OR LLM Vision integration configured
      - Mobile app notify service available
      - External URL set under Settings > System > Network

    âœ¨ Features:
      - Dual integration support (AI Task or LLM Vision)
      - Analyzes both snapshots and video clips
      - Smart zone and object filtering
      - Configurable AI parameters
      - Dynamic notification priority
      - Built-in cooldown system

  domain: automation
  author: Brad
  source_url: https://github.com/your-repo/frigate-ai-notifications

  input:
    in_ai_integration:
      name: AI Integration Type
      description: Choose which AI integration to use
      default: ai_task
      selector:
        select:
          options:
            - label: "AI Task (Home Assistant 2025.8+)"
              value: ai_task
            - label: "LLM Vision"
              value: llmvision

    in_ai_task_entity:
      name: AI Task Entity
      description: >
        Select the AI Task entity (required if using AI Task)
      default: []
      selector:
        entity:
          domain: ai_task

    in_llm_provider:
      name: LLM Vision Provider
      description: >
        Select your LLM Vision provider (required if using LLM Vision)
      default: OpenAI
      selector:
        select:
          options:
            - OpenAI
            - Claude
            - Google
            - Groq
            - LocalAI
            - Ollama
            - Custom OpenAI Compatible
            - Anthropic
            - Google Gemini
            - XAI

    in_llm_model:
      name: LLM Model
      description: >
        Model to use (for LLM Vision). Leave empty for provider default
      default: ""
      selector:
        text:

    in_camera:
      name: Frigate Camera
      description: The Frigate camera entity to monitor
      selector:
        entity:
          integration: frigate
          domain: camera

    in_labels:
      name: Detectable Objects
      description: Objects that should trigger AI analysis
      default:
        - person
        - car
      selector:
        select:
          multiple: true
          options:
            - person
            - car
            - dog
            - cat
            - package
            - bear
            - cow
            - sheep
            - horse
            - bird
            - bicycle
            - motorcycle
            - airplane
            - bus
            - train
            - boat

    in_zones:
      name: Zones (Optional)
      description: >
        Only trigger for detections in these zones (leave empty for all zones)
      default: []
      selector:
        select:
          multiple: true
          custom_value: true
          options: []

    in_notify_devices:
      name: Devices to Notify
      description: Select mobile devices to receive notifications
      selector:
        device:
          multiple: true
          filter:
            integration: mobile_app

    in_snapshot_prompt:
      name: Snapshot Instructions
      default: >
        Provide a concise, one-sentence description of what is happening in
        this image. Focus on who/what is present, their activity, and
        direction of motion. If a face or license plate is visible,
        mention it.
      selector:
        text:
          multiline: true

    in_clip_prompt:
      name: Clip Instructions
      default: >
        Provide a detailed 2-3 sentence summary of what happens in this
        video. Describe the objects, actions, movement, direction, and
        context. Include face or license plate info if visible.
      selector:
        text:
          multiline: true

    in_max_tokens:
      name: Max Tokens (LLM Vision)
      description: Maximum response length (LLM Vision only)
      default: 150
      selector:
        number:
          min: 50
          max: 500
          step: 10

    in_temperature:
      name: Temperature (LLM Vision)
      description: >
        AI creativity level - 0=focused, 1=balanced, 2=creative
        (LLM Vision only)
      default: 0.3
      selector:
        number:
          min: 0
          max: 2
          step: 0.1

    in_downscale_resolution:
      name: Target Resolution (LLM Vision)
      description: >
        Downscale images to this width in pixels
        (LLM Vision only, 0 = no downscaling)
      default: 0
      selector:
        number:
          min: 0
          max: 1920
          step: 160
          unit_of_measurement: px
          mode: slider

    in_include_entities:
      name: Include Entity Context (LLM Vision)
      description: >
        Include these entities' states as context for the AI
        (LLM Vision only)
      default: []
      selector:
        entity:
          multiple: true

    in_notify_cooldown:
      name: Notification Cooldown (seconds)
      description: Minimum time between notifications for the same camera
      default: 30
      selector:
        number:
          min: 10
          max: 3600

    in_high_priority_labels:
      name: High Priority Objects
      description: Objects that trigger high priority notifications
      default: []
      selector:
        select:
          multiple: true
          options:
            - person
            - car
            - dog
            - cat
            - package
            - bear
            - cow
            - sheep
            - horse
            - bird
            - bicycle
            - motorcycle
            - airplane
            - bus
            - train
            - boat

trigger:
  - platform: mqtt
    topic: frigate/events

condition: []

variables:
  ai_integration: !input in_ai_integration
  ai_task_entity: !input in_ai_task_entity
  llm_provider: !input in_llm_provider
  llm_model: !input in_llm_model
  camera: !input in_camera
  labels: !input in_labels
  zones: !input in_zones
  devices: !input in_notify_devices
  snapshot_prompt: !input in_snapshot_prompt
  clip_prompt: !input in_clip_prompt
  max_tokens: !input in_max_tokens
  temperature: !input in_temperature
  downscale_resolution: !input in_downscale_resolution
  include_entities: !input in_include_entities
  cooldown: !input in_notify_cooldown
  high_priority_labels: !input in_high_priority_labels
  camera_name: "{{ camera.split('.')[-1] }}"
  external_url: >
    {{ states('sensor.external_url') if states('sensor.external_url')
    not in ['unknown', 'unavailable', 'none'] else
    state_attr('zone.home', 'external_url') }}

mode: queued
max: 10
max_exceeded: silent

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.payload_json['type'] == 'end' }}
          - condition: template
            value_template: >
              {{ trigger.payload_json['after']['camera'] == camera_name }}
          - condition: template
            value_template: >
              {{ trigger.payload_json['after']['label'] in labels }}
          - condition: template
            value_template: >
              {% if zones | length > 0 %}
                {% set entered_zones = trigger.payload_json['after']
                  ['entered_zones'] | default([]) %}
                {{ entered_zones | select('in', zones) | list | length > 0 }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: >
              {% set last = state_attr(this.entity_id, 'last_triggered') %}
              {% if last is none %}
                true
              {% else %}
                {% set time_diff = (now() - last).total_seconds() %}
                {{ time_diff > cooldown }}
              {% endif %}
        sequence:
          # Debug: Log the event
          - service: system_log.write
            data:
              message: >
                Frigate AI: Event triggered for camera {{ camera_name }},
                label: {{ trigger.payload_json['after']['label'] }}
              level: info

          - delay:
              seconds: 2

          # Analyze snapshot based on selected integration
          - choose:
              # AI Task integration
              - conditions:
                  - condition: template
                    value_template: "{{ ai_integration == 'ai_task' }}"
                sequence:
                  - service: ai_task.generate_data
                    continue_on_error: true
                    target:
                      entity_id: "{{ ai_task_entity }}"
                    data:
                      task_name: >
                        Frigate Snapshot Analysis - {{ camera_name }}
                      instructions: "{{ snapshot_prompt }}"
                      attachments:
                        - media_content_id: >
                            media-source://media_source/frigate/{{
                            trigger.payload_json['after']['id']
                            }}/snapshot.jpg
                          media_content_type: image/jpeg
                    response_variable: snapshot_ai
            # LLM Vision integration
            default:
              - service: llmvision.image_analyzer
                continue_on_error: true
                data:
                  provider: "{{ llm_provider }}"
                  model: "{{ llm_model if llm_model != '' else omit }}"
                  message: "{{ snapshot_prompt }}"
                  image_entity:
                    - "{{ camera }}"
                  image_file: >
                    media-source://media_source/frigate/{{
                    trigger.payload_json['after']['id'] }}/snapshot.jpg
                  max_tokens: "{{ max_tokens }}"
                  temperature: "{{ temperature }}"
                  target_width: >
                    {{ downscale_resolution if downscale_resolution > 0
                    else omit }}
                  include_entities: >
                    {{ include_entities if include_entities | length > 0
                    else omit }}
                response_variable: snapshot_ai

          # Analyze clip based on selected integration
          - choose:
              # AI Task integration
              - conditions:
                  - condition: template
                    value_template: "{{ ai_integration == 'ai_task' }}"
                sequence:
                  - service: ai_task.generate_data
                    continue_on_error: true
                    target:
                      entity_id: "{{ ai_task_entity }}"
                    data:
                      task_name: >
                        Frigate Clip Analysis - {{ camera_name }}
                      instructions: "{{ clip_prompt }}"
                      attachments:
                        - media_content_id: >
                            media-source://media_source/frigate/{{
                            trigger.payload_json['after']['id'] }}/clip.mp4
                          media_content_type: video/mp4
                    response_variable: clip_ai
            # LLM Vision integration
            default:
              - service: llmvision.video_analyzer
                continue_on_error: true
                data:
                  provider: "{{ llm_provider }}"
                  model: "{{ llm_model if llm_model != '' else omit }}"
                  message: "{{ clip_prompt }}"
                  video_file: >
                    media-source://media_source/frigate/{{
                    trigger.payload_json['after']['id'] }}/clip.mp4
                  max_tokens: "{{ max_tokens }}"
                  temperature: "{{ temperature }}"
                  target_width: >
                    {{ downscale_resolution if downscale_resolution > 0
                    else omit }}
                  include_entities: >
                    {{ include_entities if include_entities | length > 0
                    else omit }}
                response_variable: clip_ai

          - variables:
              detected_label: >
                {{ trigger.payload_json['after']['label'] }}
              detection_confidence: >
                {{ (trigger.payload_json['after']['score'] * 100)
                | round(1) }}
              snapshot_description: >
                {% if ai_integration == 'ai_task' %}
                  {% if snapshot_ai is defined and
                    snapshot_ai.data is defined %}
                    {% if snapshot_ai.data is string %}
                      {{ snapshot_ai.data }}
                    {% elif snapshot_ai.data.analysis is defined %}
                      {{ snapshot_ai.data.analysis }}
                    {% elif snapshot_ai.data.summary is defined %}
                      {{ snapshot_ai.data.summary }}
                    {% else %}
                      Detection captured ({{ detected_label }} -
                      {{ detection_confidence }}% confidence)
                    {% endif %}
                  {% else %}
                    Detection captured ({{ detected_label }} -
                    {{ detection_confidence }}% confidence)
                  {% endif %}
                {% else %}
                  {% if snapshot_ai is defined and
                    snapshot_ai.response_text is defined %}
                    {{ snapshot_ai.response_text }}
                  {% else %}
                    Detection captured ({{ detected_label }} -
                    {{ detection_confidence }}% confidence)
                  {% endif %}
                {% endif %}
              clip_description: >
                {% if ai_integration == 'ai_task' %}
                  {% if clip_ai is defined and
                    clip_ai.data is defined %}
                    {% if clip_ai.data is string %}
                      {{ clip_ai.data }}
                    {% elif clip_ai.data.analysis is defined %}
                      {{ clip_ai.data.analysis }}
                    {% elif clip_ai.data.summary is defined %}
                      {{ clip_ai.data.summary }}
                    {% else %}
                      Motion event recorded
                    {% endif %}
                  {% else %}
                    Motion event recorded
                  {% endif %}
                {% else %}
                  {% if clip_ai is defined and
                    clip_ai.response_text is defined %}
                    {{ clip_ai.response_text }}
                  {% else %}
                    Motion event recorded
                  {% endif %}
                {% endif %}
              notification_priority: >
                {% if detected_label in high_priority_labels %}
                  high
                {% elif detected_label in ['package', 'car', 'motorcycle'] %}
                  normal
                {% else %}
                  low
                {% endif %}
              entered_zones_text: >
                {% set entered = trigger.payload_json['after']
                  ['entered_zones'] | default([]) %}
                {% if entered | length > 0 %}
                  in {{ entered | join(', ') }}
                {% else %}
                  
                {% endif %}

          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - variables:
                    device_name: "{{ device_attr(repeat.item, 'name') }}"
                    notify_service: >
                      notify.mobile_app_{{
                      device_name | replace(' ', '_') |
                      replace('-', '_') | replace('.', '_') | lower }}

                - condition: template
                  value_template: >
                    {{ notify_service in integration_entities('notify') }}

                - service: "{{ notify_service }}"
                  continue_on_error: true
                  data:
                    title: >
                      ðŸŽ¯ {{ detected_label | title }} Detected
                      {{ entered_zones_text }}
                    message: >
                      ðŸ“¸ {{ snapshot_description }}

                      ðŸŽ¬ {{ clip_description }}

                      ðŸ“Š Confidence: {{ detection_confidence }}%
                    data:
                      image: >
                        {{ external_url }}/api/frigate/notifications/{{
                        trigger.payload_json['after']['id'] }}/snapshot.jpg
                      video: >
                        {{ external_url }}/api/frigate/notifications/{{
                        trigger.payload_json['after']['id'] }}/clip.mp4
                      group: >
                        frigate_ai_{{
                        trigger.payload_json['after']['camera'] }}
                      tag: >
                        frigate_ai_{{ trigger.payload_json['after']['id'] }}
                      ttl: 0
                      priority: "{{ notification_priority }}"
                      clickAction: /lovelace/cameras
                      actions:
                        - action: "URI"
                          title: "View Clip"
                          uri: >
                            {{ external_url }}/api/frigate/notifications/{{
                            trigger.payload_json['after']['id'] }}/clip.mp4
                        - action: "frigate_ai_silence_{{ camera_name }}"
                          title: "Silence (1hr)"
                          destructive: true
    default: []
